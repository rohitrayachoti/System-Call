diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index f0b1709..ae998ce 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -343,6 +343,7 @@
 332	common	statx			__x64_sys_statx
 333	common	io_pgetevents		__x64_sys_io_pgetevents
 334	common	rseq			__x64_sys_rseq
+335	common	s2_encrypt		__x64_sys_s2_encrypt
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 5c1a093..911710641 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -689,6 +689,9 @@ asmlinkage long sys_getegid(void);
 asmlinkage long sys_gettid(void);
 asmlinkage long sys_sysinfo(struct sysinfo __user *info);
 
+/* kernel/s2_encrypt.c */
+asmlinkage long sys_s2_encrypt(char __user *input, int inc);
+
 /* ipc/mqueue.c */
 asmlinkage long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);
 asmlinkage long sys_mq_unlink(const char __user *name);
diff --git a/kernel/Makefile b/kernel/Makefile
index 04bc07c..517f5fe 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -10,7 +10,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o
+	    async.o range.o smpboot.o ucount.o s2_encrypt.o
 
 obj-$(CONFIG_MODULES) += kmod.o
 obj-$(CONFIG_MULTIUSER) += groups.o
diff --git a/kernel/s2_encrypt.c b/kernel/s2_encrypt.c
new file mode 100644
index 0000000..a7e5232
--- /dev/null
+++ b/kernel/s2_encrypt.c
@@ -0,0 +1,44 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/linkage.h>
+#include <linux/uaccess.h>
+
+SYSCALL_DEFINE2 (s2_encrypt, char __user*, input, int, inc) {
+	/* Reading Encryption key value */
+	unsigned long increment = inc;
+	
+	/* Validating Encryption key */
+	if(increment < 1 || increment > 5) {
+		printk(KERN_ERR "\nsys_s2_encrypt: Invalid encryption key value, Please enter value in the range 1-5\n");
+		return -EINVAL;
+	}	
+	/* Reading input string to be encrypted from user space */
+	char buf[256];
+	if(copy_from_user(buf, input, 256)) {
+		printk(KERN_ERR "\nsys_s2_encrypt: copy from user string failed\n");
+		return -EFAULT;
+	}
+
+	/* Incrementing each character of input string with key
+	 * If the incremented value is out of bounds EINVAL is returned
+	 */
+	unsigned long k = 0;
+	unsigned long av = 0;
+	unsigned long incValue = 0;
+
+	while(buf[k] != '\0') {
+		av = (int) buf[k];
+		incValue = av + increment;
+		if(incValue < 0 || incValue > 255) {
+			printk(KERN_ERR "\nsys_s2_encrypt: Encrypted value out of bounds\n");
+			return -EINVAL;
+		}
+		buf[k++] = incValue;
+	}
+
+	/* Printing the output if encryption is successful */
+	printk(KERN_INFO "\nsys_s2_encrypt: Encrypted string: %s\n", buf);
+	return 0;
+}
